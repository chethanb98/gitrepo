package com.test.mongo.mongoconnection;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Properties;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;




public class kafkaConsumer {
	
	public static void main(String[] args) {
	
		System.out.println("this is kafka consumer");
		
	  Properties props = new Properties();
	  props.put("bootstrap.servers", "localhost:9092");
	  props.put("group.id", "test-consumer-group"); // default topic name
	  props.put("enable.auto.commit", "true");
	  props.put("auto.commit.interval.ms", "1000");
	  props.put("session.timeout.ms", "30000");
	  props.put("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
	  props.put("value.deserializer","org.apache.kafka.common.serialization.StringDeserializer");
	  @SuppressWarnings("resource")
	  KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(props);

	  //Kafka Consumer subscribes list of topics here.
	  consumer.subscribe(Arrays.asList("test"));  // replace you topic name

	  for (TopicPartition partition: consumer.assignment())
  		System.out.println("the partition name is and partition id is"+ partition);
  while (true) {
      ConsumerRecords<String, String> records = consumer.poll(100);
      for (ConsumerRecord<String, String> record : records) {	       
      System.out.println("the next record value is %s and partition value is %s"+ record.value());
      }
  }
	  
	  
	  /*
	  while (true) {
	        ConsumerRecords<String, String> records = consumer.poll(100);	
	        for (ConsumerRecord<String, String> record : records)
	        {	
	        	String value2 = record.value();	        	
	        	
	        	if (value2 == "17005")
	        		{
	        			System.out.printf("this is tenant id value =%s%n",record.value());
	        		}
	        	
	            System.out.printf("offset = %d, key = %s, value = %s%n", record.offset(), record.key(), record.value()
	            		);	        
	        	}
	    }
	    
	
  import org.apache.hadoop.conf.Configuration;
  import org.apache.hadoop.hbase.HBaseConfiguration;
  import org.apache.hadoop.hbase.client.Get;
  import org.apache.hadoop.hbase.client.HTable;
  import org.apache.hadoop.hbase.client.Result;
  import org.apache.hadoop.hbase.util.Bytes;
  ...
          HTable htable = null;
          try {
              htable = new HTable(conf, "mytable");
              List<Get> queryRowList = new ArrayList<Get>();
              queryRowList.add(new Get(Bytes.toBytes("mykey1:myhash1")));
              queryRowList.add(new Get(Bytes.toBytes("mykey1:myhash2")));
              queryRowList.add(new Get(Bytes.toBytes("mykey1:myhash3")));
              queryRowList.add(new Get(Bytes.toBytes("mykey2:myhash5")));

              Result[] results = htable.get(queryRowList);
              for (Result r : results) {
                  //do something
              }
          }
          finally {
              if (htable != null) {
                  htable.close();
              }
          }
          */
  
  
  
  
	  
	  
	}
}
